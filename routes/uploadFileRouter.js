// routes/authRouter.js
const express = require("express");
const { pool, insertDataToDB } = require("../config/config_db");
const multer = require("multer");
const path = require("path");
const fs = require("fs").promises; // ‡πÉ‡∏ä‡πâ promises version ‡∏Ç‡∏≠‡∏á fs
const landModel = require("../model/landModel");

const router = express.Router();
const liveStorage = multer.diskStorage({
  destination: (req, file, cb) => {
    const dir = path.join("uploads", "land_lives");
    fs.mkdir(dir, { recursive: true }) // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
      .then(() => cb(null, dir))
      .catch((err) => cb(err, null));
  },
  filename: (req, file, cb) => {
    const ext = path.extname(file.originalname); // ‡∏î‡∏∂‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå
    console.log(ext);
    const fileName = Date.now() + ext; // ‡πÉ‡∏ä‡πâ timestamp + ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå
    cb(null, fileName); // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° path)
  },
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
const fileFilter = (req, file, cb) => {
  const allowedTypes = ["image/jpeg", "image/png"];
  if (allowedTypes.includes(file.mimetype)) {
    cb(null, true);
  } else {
    cb(new Error("‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó JPG ‡πÅ‡∏•‡∏∞ PNG"), false);
  }
};

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ multer
const upload = multer({
  storage: liveStorage,
  fileFilter: fileFilter,
});

// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
const handleFileUpload = upload.single("file");

// Route handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå + ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
const uploadAndInsertToDB = async (req, res) => {
  handleFileUpload(req, res, async (err) => {
    if (err) {
      return res.status(400).json({ message: err.message });
    }

    try {
      console.log("üìÅ File received:", req.file);
      console.log("üìù Other data:", req.body.landID);
      const LAND_ID = req.body.landID;
      const fileName = req.file.filename;

      const query =
        "INSERT INTO document_lives (path_file,doc_land_id) VALUES (?,?);";
      const body = [fileName, LAND_ID];

      const success = await insertDataToDB(query, body);

      if (success) {
        return res
          .status(200)
          .json({ message: "‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
      } else {
        // üî• ‡∏´‡∏≤‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‚Üí ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå
        await fs.unlink(req.file.path);
        console.log(`‚ùå File ${req.file.path} deleted due to database error.`);
        return res
          .status(500)
          .json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏•‡∏ö" });
      }
    } catch (err) {
      // üî• ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      if (req.file) {
        await fs.unlink(req.file.path);
        console.log(`‚ùå File ${req.file.path} deleted due to server error.`);
      }

      return res.status(500).json({
        message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏•‡∏ö",
        error: err.message,
      });
    }
  });
};

router.get("/live_files", async (req, res) => {
  console.log("query:", req.query.land_id);
  if (!req.query.land_id) {
    return res.send("query is wrong");
  }
  const LAND_ID = req.query.land_id;

  try {
    const landData = await landModel.getAllLiveFileByID(LAND_ID);
    // console.log("landData:", landData);

    return res.status(200).json(landData); // ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
  } catch (err) {
    console.error("‚ùå Error reading files:", err);
    return res
      .status(500)
      .json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå" });
  }
});

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡∏Ç‡∏≠‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
const projectRoot = path.join(__dirname, ".."); // ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå routes

// router.get("/live_files/:filePath", async (req, res) => {
//   const filePath = req.params.filePath; // ‡∏£‡∏±‡∏ö filePath ‡∏à‡∏≤‡∏Å URL
//   const fullPath = path.join(
//     __dirname,
//     "..",
//     "uploads",
//     "land_lives",
//     filePath
//   ); // ‡∏™‡∏£‡πâ‡∏≤‡∏á path ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

//   console.log("Requested file:", filePath); // Log ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≠
//   console.log("Full path:", fullPath); // Log path ‡πÄ‡∏ï‡πá‡∏°

//   // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
//   if (fs.existsSync(fullPath)) {
//     // ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á client
//     res.sendFile(fullPath, (err) => {
//       if (err) {
//         console.error("Error sending file:", err);
//         res.status(500).send("Error fetching file");
//       }
//     });
//   } else {
//     // ‡∏´‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏•‡∏±‡∏ö
//     console.error("File not found:", fullPath);
//     res.status(404).send("File not found");
//   }
// });

router.get('/download_live/:filePath', async (req, res) => {
  const filePath = req.params.filePath; // ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å URL
  console.log('filename:',filePath)
  const fullPath = path.join('uploads', 'land_lives', filePath);

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    await fs.access(fullPath);

    // ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á client
    res.download(fullPath, filePath, (err) => {
      if (err) {
        console.error("Error downloading file:", err);
        res.status(500).send("Error downloading file");
      }
    });
  } catch (err) {
    // ‡∏´‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏•‡∏±‡∏ö
    res.status(404).send("File not found");
  }
});

router.post("/land/live", uploadAndInsertToDB);

module.exports = router;
